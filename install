#!/usr/bin/env ruby

require 'fileutils'
require 'open3'
require 'optparse'

OptionParser.new do |opts|
  opts.banner = 'Usage: setup [options]'
  opts.on('-u', '--update', 'Update instead of install') do |v|
    $update = v
  end
  opts.on('-v', '--[no-]verbose', 'Verbose output') do |v|
    $verbose = v
  end
end.parse!

$failed = false

class String
  def bold; "\e[1m#{self}\e[21m" end
  def green; "\e[1;32m#{self}\e[0m" end
  def red; "\e[1;31m#{self}\e[0m" end
  def yellow; "\e[1;33m#{self}\e[0m" end
end

def backup(path)
  path = File.expand_path path
  run "mv '#{path}' '#{path}.backup.#{Time.now.getutc.to_i}'" if exists path
end

def contains_line(path, regexp)
  File.foreach(File.expand_path path).grep(regexp).any?
end

def exists(path)
  path = File.expand_path path
  result = Dir.exist?(path) || File.exist?(path) || File.symlink?(path)
  if $verbose
    if result
      report "#{path} exists"
    else
      report "#{path} does not exist"
    end
  end
  return result
end

def exists_dir(path)
  path = File.expand_path path
  result = Dir.exist?(path) || File.symlink?(path)
  if $verbose
    if result
      report "#{path} exists"
    else
      report "#{path} does not exist"
    end
  end
  return result
end

def exists_file(path)
  path = File.expand_path path
  result = File.exist?(path) || File.symlink?(path)
  if $verbose
    if result
      report "#{path} exists"
    else
      report "#{path} does not exist"
    end
  end
  return result
end

def hardlink(from_path, to_path)
  from_path = File.expand_path from_path
  to_path = File.expand_path to_path
  return if File.exist?(from_path) && File.lstat(from_path).ino == File.lstat(to_path).ino
  backup from_path
  from_dir = File.dirname(from_path)
  FileUtils.makedirs(from_dir) if !exists_dir(from_dir)
  File.link(to_path, from_path)
end

def install(from, to = nil)
  to = from if to == nil
  hardlink (path_home to), (path_repo from)
end

def path_home(path)
  File.expand_path File.join(Dir.home, path)
end

def path_repo(path)
  File.expand_path File.join(File.dirname(__FILE__), path)
end

def report(message)
  puts message
end

def report_bad(message)
  report message.red.bold
end

def report_good(message)
  report message.green.bold
end

def report_step(message)
  report message.yellow.bold
end

def run(command)
  success, output = run_report(command)
  return success
end

def run_general(command)
  stdout, stderr, status = Open3.capture3(command)
  if stdout.empty?
    output = stderr
  elsif stderr.empty?
    output = stdout
  else
    output = stdout + "\n" + stderr
  end
  return status.success?, output
end

def run_report(command)
  success, output = run_general(command)
  if success
    if $verbose
      report_good "Succeeded: #{command}"
      report output unless output.empty?
    end
  else
    report_bad "Failed: #{command}"
    report output unless output.empty?
  end
  $failed = !success unless $failed
  return success, output
end

def run_output(command)
  success, output = run_report(command)
  return output
end

unless run_output('uname').include? 'Darwin'
  report_error 'Error: Computer is not a Mac'
  exit 1
end

# Update
if $update
  report_step 'Updating Setup...'
  run "git -C '#{path_repo '.'}' pull origin master"
  report_step 'Updating Homebrew...'
  run 'brew upgrade'
  run 'brew cleanup'
  report_step 'Updating Fisher...'
  run 'fish -c "fisher update"'
  report_step 'Updating Janus...'
  run "sh -c 'cd \"#{path_home '.'}/.vim\" && rake'"

  if $failed
    report_bad 'Failed'
    exit 1
  else
    report_good 'Succeeded'
    exit 0
  end
end

# Authenticate
run 'sudo -v'

# Preferences
report_step 'Installing preferences...'
run "osascript -e 'tell application \"System Preferences\" to quit'"
run "#{path_repo '.'}/scripts/defaults.sh"

# Keys
unless exists_file('~/.ssh/id_rsa') && exists_file('~/.ssh/id_rsa.pub')
  report_step 'Installing keys...'
  backup '~/.ssh/id_rsa'
  backup '~/.ssh/id_rsa.pub'
  run "ssh-keygen -N '' -f '#{Dir.home}/.ssh/id_rsa' -q"
end

# Files
report_step 'Installing files...'
install 'files/.editorconfig', '.editorconfig'
install 'files/.gitconfig', '.gitconfig'
install 'files/.gitignore', '.gitignore'
install 'files/.hushlogin', '.hushlogin'
install 'files/.inputrc', '.inputrc'
install 'files/config.fish', '.config/fish/config.fish'
install 'files/settings.json', 'Library/Application Support/Code/User/settings.json'

# Directories
dev = File.join(Dir.home, 'Developer')
unless exists_dir dev
  report_step 'Installing directories...'
  Dir.mkdir(dev)
end

# Terminal
unless run_output('defaults read com.apple.Terminal "Default Window Settings"').include?('Solarized')
  report_step 'Installing terminal...'
  run "open '#{path_repo 'files/Solarized.terminal'}'"
end

# Homebrew
report_step 'Installing Homebrew...'
run 'sh -c "curl -fsLS https://raw.githubusercontent.com/Homebrew/install/master/install.sh | bash"' unless exists_file '/usr/local/bin/brew'
run "brew bundle --file='#{path_repo 'files/Brewfile'}'"
run 'brew cleanup'
run 'brew doctor'
run 'sudo chsh -s /usr/local/bin/fish $USER' if exists_file('/usr/local/bin/fish') && !run_output('sh -c "echo $SHELL"').include?('/usr/local/bin/fish')

# Fisher
report_step 'Installing Fisher...'
run 'fish -c "curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher"' unless exists_file '~/.config/fish/functions/fisher.fish'
run 'fish -c "fisher install pure-fish/pure"'

# Janus
unless exists_dir '~/.vim'
  report_step 'Installing Janus...'
  run 'sh -c "curl -fsLS https://bit.ly/janus-bootstrap | bash"'
end

if $failed
  report_bad 'Failed'
  exit 1
else
  report_good 'Succeeded'
  exit 0
end
